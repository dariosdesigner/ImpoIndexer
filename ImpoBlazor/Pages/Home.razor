@page "/"
@using ImpoLib
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS
@using System.Linq

<h3>Imposition Layout Preview</h3>
<p>Configure os parâmetros para visualizar o layout de imposição:</p>

<EditForm Model="@settings" OnValidSubmit="@UpdatePreview">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Páginas por Lado (por face):</label>
        <InputNumber @bind-Value="settings.PagesPerSide" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Gap entre Páginas (em pontos):</label>
        <InputNumber @bind-Value="settings.GapBetweenPages" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Largura da Página Original (em pontos):</label>
        <InputNumber @bind-Value="originalWidth" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Altura da Página Original (em pontos):</label>
        <InputNumber @bind-Value="originalHeight" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Total de Páginas:</label>
        <InputNumber @bind-Value="settings.TotalPages" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Método de Imposição:</label>
        <InputSelect @bind-Value="settings.ImpositionMethod" class="form-select">
            <option value="1">Perfect-Bound</option>
            <option value="2">Cut-Stack</option>
        </InputSelect>
    </div>
    <div class="mb-3 form-check">
        <InputCheckbox @bind-Value="settings.DoubleSided" class="form-check-input" id="doubleSidedCheck" />
        <label class="form-check-label" for="doubleSidedCheck">Frente e Verso</label>
    </div>
    <button type="submit" class="btn btn-primary">Atualizar Visualização</button>
</EditForm>

@if (layoutCalculated)
{
    <h4 class="mt-3">Layout de Imposição</h4>
    <p>
        Cada folha tem dimensões de: <strong>@outputWidth</strong> x <strong>@outputHeight</strong> pts.
        Total de folhas: <strong>@totalSheets</strong>.
    </p>
    <canvas id="layoutCanvas" width="@canvasWidth" height="@canvasHeight" style="border:1px solid #ccc;"></canvas>
}

@code {
    // Tipo auxiliar para representar a ordem de uma face (front ou back) de uma folha
    public class FaceOrder
    {
        public int Sheet { get; set; }
        public string Face { get; set; } // "front" ou "back"
        public int[] Order { get; set; }
    }

    // Configurações (utilizando a classe ImpoLib.ImpositionSettings)
    private ImpositionSettings settings = new ImpositionSettings
        {
            PagesPerSide = 4,         // Para assinatura de 8 páginas, deve ser 4 (pois 4 páginas por face)
            GapBetweenPages = 6,
            ImpositionMethod = 1,     // Perfect-Bound
            DoubleSided = true,
            TotalPages = 8            // Caso especial para 8 páginas
        };

    // Dimensões originais da página (exemplo para A4 em pontos)
    private float originalWidth = 595;
    private float originalHeight = 842;

    // Dimensões calculadas para uma face de folha
    private float outputWidth;
    private float outputHeight;
    private int cols;
    private int rows;
    private bool layoutCalculated = false;

    // Para múltiplas folhas
    private int pagesPerSheet;
    private int adjustedPageCount;
    private int totalSheets;
    private List<FaceOrder> faces;

    // Parâmetros para o canvas (fator de escala e margens)
    private double canvasScale = 0.2;
    private double canvasWidth => outputWidth * canvasScale + 40; // 20px de margem em cada lado
    private double canvasHeight
    {
        get
        {
            // Se duplex, cada folha tem 2 faces; senão, 1 face por folha
            int totalFaces = settings.DoubleSided ? totalSheets * 2 : totalSheets;
            return totalFaces * (outputHeight * canvasScale + sheetMargin * canvasScale) + 40;
        }
    }
    private double sheetMargin = 20; // margem entre faces, em pontos

    protected override void OnInitialized()
    {
        CalculateLayout();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (layoutCalculated)
        {
            var parameters = new
            {
                outputWidth,
                outputHeight,
                gapBetween = settings.GapBetweenPages,
                cols,
                rows,
                sheetMargin,
                totalSheets,
                canvasScale,
                faces = faces.Select(f => new { f.Sheet, Face = f.Face ?? "front", Order = f.Order.ToArray() }).ToArray()
            };
            await JS.InvokeVoidAsync("drawLayout", parameters);
        }
    }

    private void UpdatePreview()
    {
        CalculateLayout();
        StateHasChanged();
    }

    private void CalculateLayout()
    {
        // Calcula as dimensões da face (grid) usando o LayoutCalculator da biblioteca
        LayoutCalculator.CalculateOutputDimensions(settings.PagesPerSide, originalWidth, originalHeight,
            settings.GapBetweenPages, out outputWidth, out outputHeight, out cols, out rows);
        layoutCalculated = true;

        // Calcula páginas por folha (se duplex, dobra)
        pagesPerSheet = settings.DoubleSided ? settings.PagesPerSide * 2 : settings.PagesPerSide;
        adjustedPageCount = settings.TotalPages;
        if (settings.TotalPages % pagesPerSheet != 0)
        {
            adjustedPageCount = ((settings.TotalPages / pagesPerSheet) + 1) * pagesPerSheet;
        }
        totalSheets = adjustedPageCount / pagesPerSheet;

        // Cria a lista de faces para desenhar
        faces = new List<FaceOrder>();

        // Se for o caso especial de 8 páginas com Perfect-Bound duplex
        if (settings.TotalPages == 8 && settings.ImpositionMethod == 1 && settings.DoubleSided && settings.PagesPerSide == 4)
        {
            // Para este caso, o layout é fixo: grade 2x2
            cols = 2; rows = 2; totalSheets = 1;
            faces.Add(new FaceOrder { Sheet = 0, Face = "front", Order = new int[] { 8, 1, 2, 7 } });
            faces.Add(new FaceOrder { Sheet = 0, Face = "back", Order = new int[] { 6, 3, 4, 5 } });
        }
        else
        {
            // Para outros casos:
            if (settings.DoubleSided)
            {
                for (int sheet = 0; sheet < totalSheets; sheet++)
                {
                    int[] frontOrder, backOrder;
                    if (settings.ImpositionMethod == 1)
                    {
                        frontOrder = LayoutCalculator.CalculatePerfectBoundPages(sheet, adjustedPageCount, settings.PagesPerSide, true, false);
                        backOrder = LayoutCalculator.CalculatePerfectBoundPages(sheet, adjustedPageCount, settings.PagesPerSide, true, true);
                    }
                    else
                    {
                        frontOrder = Enumerable.Range(sheet * settings.PagesPerSide + 1, settings.PagesPerSide).ToArray();
                        backOrder = Enumerable.Range(sheet * settings.PagesPerSide + settings.PagesPerSide + 1, settings.PagesPerSide).ToArray();
                    }
                    faces.Add(new FaceOrder { Sheet = sheet, Face = "front", Order = frontOrder });
                    faces.Add(new FaceOrder { Sheet = sheet, Face = "back", Order = backOrder });
                }
            }
            else
            {
                for (int sheet = 0; sheet < totalSheets; sheet++)
                {
                    int[] order;
                    if (settings.ImpositionMethod == 1)
                    {
                        order = LayoutCalculator.CalculatePerfectBoundPages(sheet, adjustedPageCount, settings.PagesPerSide, false, false);
                    }
                    else
                    {
                        order = Enumerable.Range(sheet * settings.PagesPerSide + 1, settings.PagesPerSide).ToArray();
                    }
                    faces.Add(new FaceOrder { Sheet = sheet, Face = "front", Order = order });
                }
            }
        }
    }
}
